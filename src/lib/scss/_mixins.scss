@use "sass:math";
@use "variables";
@use "variables-elevation";

@mixin use-body-class($bodyClass) {
  #{$bodyClass} &{
    @content;
  }
}

@mixin root-color-scheme($scheme) {
  @media(prefers-color-scheme: $scheme){
    :root, :before, :after, *, :host {
      @content;
    }
  }
  .sd--scheme--#{$scheme}{
    @content;
  }
}

@mixin color-scheme($scheme) {
  @media(prefers-color-scheme: $scheme){
    @content;
  }
  @include use-body-class('.sd--scheme--#{$scheme}'){
    @content;
  }
}

@mixin flatten-theme($theme) {
  @if $theme == disabled or $theme == 'disabled ' {
    color: var(--sd-disabled);
    background-color: none;
    svg {
      fill: var(--sd-disabled);
    }
    &:hover{
      color: var(--sd-disabled);
      background-color: transparent;
      svg {
        fill: var(--sd-disabled);
      }
    }
  } @else {
    box-shadow: var(--sd-elevation-0);

    @include color-scheme(dark) {
      color: var(--sd-#{$theme});
      background-color: none;
      svg {
        fill: var(--sd-#{$theme});
      }
      &:hover {
        background-color: var(--sd-#{$theme});
        color: var(--sd-#{$theme}-text);
        svg {
          fill: var(--sd-#{$theme}-text);
        }
      }
      &:active, &.is--active, &.is--exact-active {
        background-color: var(--sd-#{$theme}-accent);
      }
    }
    @include color-scheme(light) {
      color: var(--sd-#{$theme}-accent);
      background-color: none;
      svg {
        fill: var(--sd-#{$theme}-accent);
      }
      &:hover {
        background-color: var(--sd-#{$theme});
        color: var(--sd-#{$theme}-text);
        svg {
          fill: var(--sd-#{$theme}-text);
        }
      }
      &:active, &.is--active, &.is--exact-active {
        background-color: var(--sd-#{$theme}-highlight);
      }
    }
  }
}

@mixin flatten($base, $highlight, $accent, $contrast) {
  $lightScheme: $base;
  $darkScheme: mix($highlight, #fff, 80%);

  @include color-scheme('dark') {
    color: $darkScheme
  }

  @include color-scheme('light') {
    color: $lightScheme;
  }

  background-color: none;
  @include elevation(0);

  &:hover {
    background-color: $base;
    color: sd-color($contrast, text);
  }
  &:active, &.is--active, &.is--exact-active {
    background-color:$accent;
  }
}

@mixin aspect-ratio($width, $height) {
  overflow: hidden;
  &:before {
    @supports (aspect-ratio: 1 / 1) {
      aspect-ratio: math.div($width, $height);
    }
    @supports not (aspect-ratio: 1 / 1) {
      padding-top: math.div($height, $width) * 100%;
    }
    display: block;
    content: '';
  }
  img {
    position: absolute;
    top: 50%;
    right: 0;
    left: 0;
    transform: translateY(-50%);
  }
}

@mixin ios-safe-area {
  @supports (padding: max(32px, 32px)) {
    padding:
    0 max(16px, env(safe-area-inset-left))
    0 max(16px, env(safe-area-inset-right));
  }
}



@mixin elevation($z-value, $inset:null) {
  @if type-of($z-value) != number or not unitless($z-value) {
    @error "$z-value must be a unitless number";
  }

  @if $z-value < 0 or $z-value > 24 {
    @error "$z-value must be between 0 and 24";
  }

  @if $inset{
    box-shadow:
    inset #{map-get(variables-elevation.$umbra, $z-value)} variables-elevation.$umbra-color,
    inset #{map-get(variables-elevation.$penumbra, $z-value)} variables-elevation.$penumbra-color,
    inset #{map-get(variables-elevation.$ambient, $z-value)} variables-elevation.$ambient-color;
  } @else {
    box-shadow:
    #{map-get(variables-elevation.$umbra, $z-value)} variables-elevation.$umbra-color,
    #{map-get(variables-elevation.$penumbra, $z-value)} variables-elevation.$penumbra-color,
    #{map-get(variables-elevation.$ambient, $z-value)} variables-elevation.$ambient-color;
  }
}
