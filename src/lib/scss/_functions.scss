@use 'sass:math';
@use 'sass:map';
@use 'variables-elevation';
@import './spacing';

// Converts to rem
$base-font: 16;

// Shorthand for var()
// Usage: var(--css-var)
@function v($val) {
  @return var(#{$val});
};

// Converts PX to REM
// Usage: font-size: rem(16);
@function rem($pixels, $context: $base-font){
  @if(unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if(unitless($context)) {
    $context: $context * 1px;
  }
  @return #{math.div($pixels, $context) * 1rem};
};

// Gets color from color map
// Useage sd-color(dark, text)
@function sd-color($scheme, $type) {
  $selectedColor: map.get($sd-color-schemes, $scheme, $type);
  @return $selectedColor;
};

@function sd-color-global($scheme, $type) {
  $selectedColor: map.get($sd-color-global, $scheme, $type);
  @return $selectedColor;
};


// Manages spacing
@function spacing($type, $size: 'default'){
  @return map.get($space, $type, $size);
};

// Creates a map of colors ($base-color, $highlight, $accent);
@function color-map($color, $highlight, $accent) {
  $map: (
    'base': $color,
    'highlight': $highlight,
    'accent': $accent
  );

  @return $map;
};


@function ios-safe-area($position){
  @return m#{a}x(16px, env(safe-area-inset-#{$position}));
}

@function elevation($z-value, $inset:null) {
  @if type-of($z-value) != number or not unitless($z-value) {
    @error "$z-value must be a unitless number";
  }

  @if $z-value < 0 or $z-value > 24 {
    @error "$z-value must be between 0 and 24";
  }

  @if $inset{
    @return
    inset #{map-get(variables-elevation.$umbra, $z-value)} variables-elevation.$umbra-color,
    inset #{map-get(variables-elevation.$penumbra, $z-value)} variables-elevation.$penumbra-color,
    inset #{map-get(variables-elevation.$ambient, $z-value)} variables-elevation.$ambient-color;
  } @else {
    @return
    #{map-get(variables-elevation.$umbra, $z-value)} variables-elevation.$umbra-color,
    #{map-get(variables-elevation.$penumbra, $z-value)} variables-elevation.$penumbra-color,
    #{map-get(variables-elevation.$ambient, $z-value)} variables-elevation.$ambient-color;
  }
}
